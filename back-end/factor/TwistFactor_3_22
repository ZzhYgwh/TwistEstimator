
#pragma once

#include <ceres/ceres.h>

#include "spline/spline_segment.h"
#include "utils/parameter_struct.h"

#include "split_spline_view.h"

#include "event_flow_detector/event_flow_detector.h"

#include "DebugFile.h"

#include <iomanip>  // for std::setprecision(6)

#include <Eigen/Core>
#include <Eigen/Dense>

// #include "DebugFile.cpp"

// #include "visual_odometry/integration_base.h"


// 构建反对称矩阵
// 特殊给2D 像素点使用
Eigen::Matrix3d Skew(const cv::Point2d& vec) {
    Eigen::Matrix3d result;
    result << 0, -1.0, vec.y, 1.0, 0, -vec.x, -vec.y, vec.x, 0;
    return result;
}

// 给3D Vector使用
Eigen::Matrix3d Skew(const Eigen::Vector3d& vec) {
    Eigen::Matrix3d skewMat;
    skewMat <<  0,       -vec(2),  vec(1),
                vec(2),  0,       -vec(0),
               -vec(1),  vec(0),  0;
    return skewMat;
}

std::string Output(const Eigen::RowVectorXd& vec) {
    std::stringstream ss;
    ss << "[";
    for (int i = 0; i < vec.size(); ++i) {
        ss << vec(i);
        if (i < vec.size() - 1) {
            ss << ", ";  // 在元素之间加逗号
        }
    }
    ss << "]";
    return ss.str();
}

template <typename Derived>
std::string Output_M(const Eigen::MatrixBase<Derived>& mat) {
// std::string Output_M(const Eigen::MatrixXd& mat) {
    std::stringstream ss;
    ss << "[";
    for (int i = 0; i < mat.rows(); ++i) {
        ss << "[";
        for (int j = 0; j < mat.cols(); ++j) {
            ss << mat(i, j);
            if (j < mat.cols() - 1) {
                ss << ", ";  // 在元素之间加逗号
            }
        }
        ss << "]";
        if (i < mat.rows() - 1) {
            ss << ",\n ";  // 在每一行之间换行
        }
    }
    ss << "]";
    return ss.str();
}

std::string Output_double(const double& val) {
    std::stringstream ss;
    ss << "[";
    // ss << std::fixed << std::setprecision(6) << val;  // 控制精度为6位小数（根据需求调整）
    ss << val;  // 控制精度为6位小数（根据需求调整）
    ss << "]";
    return ss.str();
}


// HAO TODO: 以雷达的时间为准
class DopplerFactor : public ceres::CostFunction, SplitSpineView{
public:
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
  using SO3View = So3SplineView;
  using R3View = RdSplineView;
  using SplitView = SplitSpineView;

  using Vec3d = Eigen::Matrix<double, 3, 1>;
  using Vec6d = Eigen::Matrix<double, 6, 1>;
  using Mat3d = Eigen::Matrix<double, 3, 3>;
  using SO3d = Sophus::SO3<double>;

  DopplerFactor(int64_t time_ns, const Eigen::Vector3d& pt, 
            const double& doppler, const Eigen::Matrix3d& R_e_r,
            const SplineMeta<SplineOrder>& spline_segment_meta,
            double weight)// const Vec6d& info_vec)
      : time_ns_(time_ns),
        pt_(pt), doppler_(doppler),
        spline_meta_(spline_segment_meta),
        weight_(weight)
        // info_vec_(info_vec) 
        {
          set_num_residuals(1);           // 定义残差值的大小(doppler速度残差)

          size_t knot_num = spline_meta_.NumParameters();

          // TODO: 需要提供采样曲线的多普勒速度和偏执
          for (size_t i = 0; i < knot_num; ++i) {             
            mutable_parameter_block_sizes()->push_back(4);    // HAO TODO:
          }
          for (size_t i = 0; i < knot_num; ++i) {
            mutable_parameter_block_sizes()->push_back(3);
          }

          mutable_parameter_block_sizes()->push_back(3);  // linear bias

          // mutable_parameter_block_sizes()->push_back(3);  // angular bias

          // mutable_parameter_block_sizes()->push_back(1);  // time_offset 雷达时间作为系统时间,不存在时间偏移

        }

   virtual bool Evaluate(double const* const* parameters, double* residuals,
                        double** jacobians) const {
    typename SO3View::JacobianStruct J_R;
    // typename SO3View::JacobianStruct J_rot_a;
    typename R3View::JacobianStruct J_v;

    LOG(ERROR) << "Evaluate DopplerFactor " << std::endl;

    // 解析状态参数 parameters
    int knot_num = this->spline_meta_.NumParameters();               // 前 knot_num 是位置控制点 在113,120行可以计算

    int64_t t_corrected = time_ns_; //  + (int64_t)time_offset_in_ns;


    // 估计的速度
    Eigen::Vector3d gyro_, v_inG;
    SO3d S_ItoG;
    if (jacobians){
      // HAO TODO:
      S_ItoG = SO3View::EvaluateRp(t_corrected, spline_meta_.segments.at(0),
                              parameters, &J_R);

      v_inG = R3View::velocity(t_corrected,
                              spline_meta_.segments.at(0),
                              parameters + knot_num, &J_v);
    }else{
      // HAO TODO:
      S_ItoG = SO3View::EvaluateRp(t_corrected, spline_meta_.segments.at(0),
                              parameters, nullptr);
      v_inG = R3View::velocity(t_corrected,
                              spline_meta_.segments.at(0),
                              parameters + knot_num, nullptr);
    }

    Eigen::Map<Vec3d const> linear_bias(parameters[2 * knot_num]);          // 速度偏置
    
    Eigen::Matrix3d R_ItoG = S_ItoG.matrix();
    LOG(ERROR) << "R_ItoG size: " << R_ItoG.rows() << "x" << R_ItoG.cols() << std::endl;

    // Eigen::Matrix3d R_GtoI;
    // R_GtoI = R_ItoG.transpose();
    // Eigen::Matrix3d R_GtoI = R_ItoG.transpose();

    Eigen::Map<Eigen::Matrix3d> R_ItoG_map(R_ItoG.data());
    Eigen::Matrix3d R_GtoI = R_ItoG_map.transpose();  // 转置并返回新矩阵

    residuals[0] = (weight_ * (doppler_ - (pt_.normalized().transpose() * (R_GtoI * v_inG + linear_bias)).value()));    

    LOG(ERROR) << "Doppler residuals = " << residuals[0] << std::endl;

    LOG(ERROR) << "Param = [ doppler_: " << doppler_  
                          << " pt_: " << Output(pt_.normalized().transpose()) 
                          << " R_GtoI: " << Output_M(R_GtoI) 
                          // << " S_GtoI: " << Output_M(S_ItoG.matrix().transpose()) 
                          << " R_ItoG: " << Output_M(R_ItoG) 
                          << " v_inG: " << Output(v_inG.transpose()) 
                          << " linear_bias: " << Output(linear_bias.transpose()) 
                          << "] " << std::endl;

    debug_ceres.Open();
    if(!clear_debug)
    {
      clear_debug = true;
      debug_ceres.Close();

      debug_ceres.debug_file.open(debug_ceres.file_path, std::ios::trunc);
      // debug_ceres.debug_file.clear();
      debug_ceres.debug_file.close();

      debug_ceres.Open();
      debug_ceres.debug_file << "Start to Record \n";
    }

    // debug
    Eigen::RowVector3d pt_row_vec = pt_.transpose();

    Eigen::RowVector3d linear_bias_row_vec = linear_bias.transpose(); //.eval();

    // 不评估雅可比就返回
    if (!jacobians) {
      LOG(ERROR) << "Doppler No Jacobians " << std::endl;
      debug_ceres.debug_file << "No Jacobians" << std::endl;
      debug_ceres.Close();
      
      return true;
    }
    else
    {
      LOG(ERROR) << " Calculate Jacobians " << std::endl;
    }

    Eigen::RowVector3d jac_lhs_R;

    // 3-21 修改  
    // LOG(ERROR) << " S_ItoG.matrix().transpose() = " << Output_M(R_ItoG.transpose()) << std::endl;
    // jac_lhs_R = weight_ * pt_.normalized().transpose() * R_GtoI * Skew(v_inG);   

    jac_lhs_R = weight_ * pt_.normalized().transpose();
    jac_lhs_R *= (R_GtoI * Skew(v_inG));
    // jac_lhs_R = Skew(v_inG).transpose() * S_ItoG.matrix() * pt_.normalized()
    LOG(ERROR) << " start to calculate Rotation control points Jacobi" << std::endl;
    /// Rotation control point
    Eigen::Matrix<double, 4, 4> Jac_R;
    for (size_t i = 0; i < knot_num; i++) {

      size_t idx = i;// + J_R.start_idx;
    
      if (jacobians[idx]) {
      
        Eigen::Map<Eigen::Matrix<double, 1, 4, Eigen::RowMajor>> jac_kont_R(
            jacobians[idx]);
        jac_kont_R.setZero();
       
        jac_kont_R.block<1, 3>(0, 0) += (weight_ * jac_lhs_R * J_R.d_val_d_knot[i]).eval();

        Eigen::RowVectorXd jac_kont_R_copy = jac_kont_R;
      
        Jac_R.block<1,4>(i, 0) = jac_kont_R_copy;

        LOG(ERROR) << " jac_kont_R = " << Output(jac_kont_R) << std::endl;

        // debug_ceres_jacobis.debug_file << Output(jac_kont_R_copy) << " ";
      }
    }

    LOG(ERROR) << " start to calculate Position control points Jacobi" << std::endl;
    // LOG(ERROR) << " weight_ = " << weight_ << std::endl;
    // LOG(ERROR) << " pt_ = " << Output(pt_.normalized().transpose()) << std::endl;
    // LOG(ERROR) << " R_GtoI = " << Output_M(R_GtoI) << std::endl;

    // Eigen::Map<Eigen::Matrix3d> J_v_d_map((- weight_ * pt_.normalized().transpose() * R_GtoI).data());
    // Eigen::Matrix3d J_v_d_ = J_v_d_map;  // 转置并返回新矩阵
    Eigen::RowVector3d J_v_d_ = - weight_ * pt_.normalized().transpose();
    J_v_d_ *= R_GtoI;
    // J_v_d_ = (-  S_ItoG.matrix() * pt_.normalized());
    // J_v_d_ = - weight_ * pt_.normalized().transpose() * S_ItoG.matrix().transpose();
    /// position control point
    for (size_t i = knot_num; i < 2 * knot_num; i++) {
      size_t idx = i;   // [0, knot_num - 1]
      if (jacobians[idx]) {
        Eigen::Map<Eigen::Matrix<double, 1, 3, Eigen::RowMajor>> jac_kont_p(
            jacobians[idx]);
        jac_kont_p.setZero();
        
        double d_val_d_knot = J_v.d_val_d_knot[idx - knot_num];
        // LOG(ERROR) << " d_val_d_knot = " << d_val_d_knot << std::endl;
        jac_kont_p = (d_val_d_knot * J_v_d_).eval();
        // LOG(ERROR) << " J_v_d_ = " << Output(J_v_d_) << std::endl;
        LOG(ERROR) << " jac_kont_p = " << Output(jac_kont_p) << std::endl;
      }
    }

    LOG(ERROR) << " start to calculate vel bias Jacobi" << std::endl;
    Eigen::RowVector3d J_v_b_ = - weight_ * pt_.normalized().transpose();
    // [3] velocity_bias 的雅可比
    if(jacobians[2 * knot_num])
    {
      Eigen::Map<Eigen::Matrix<double, 1, 3, Eigen::RowMajor>> J_velocity_bias_(jacobians[2 * knot_num]);
     
      J_velocity_bias_ = (J_v_b_).eval();

      LOG(ERROR) << " J_velocity_bias_ = " << Output(J_velocity_bias_) << std::endl;
    }  
    else
    {
      LOG(ERROR) << "No Calculate Velocity Bias Jacobbi " << std::endl;
    }

    LOG(ERROR) << "DopplerFactor Evaluation Done" << std::endl;

    return true;
  }

private:
    int64_t time_ns_;
    Eigen::Vector3d pt_;
    SplineMeta<SplineOrder> spline_meta_;
    // Vec6d info_vec_;

    //TODO: gravity is not necessary
    // Eigen::Vector3d gravity;
    double doppler_;
    double weight_;

    // Eigen::Vector3d J_v_d_;
    // Eigen::Vector3d J_v_b_;
};



class EventAgularFactor : public ceres::CostFunction, SplitSpineView{
 public:
 EIGEN_MAKE_ALIGNED_OPERATOR_NEW
  using SO3View = So3SplineView;
  using R3View = RdSplineView;
  using SplitView = SplitSpineView;

  using Vec3d = Eigen::Matrix<double, 3, 1>;
  using Vec6d = Eigen::Matrix<double, 6, 1>;
  using Mat3d = Eigen::Matrix<double, 3, 3>;
  using Quatd = Eigen::Quaterniond;
  using SO3d = Sophus::SO3<double>;

  // EventAgularFactor(int64_t time_ns, const cv::Point2d pt, const event_flow_velocity flow, 
  //           const Eigen::Vector3d doppler_velocity,
  //           // const Eigen::Quaterniond & q_e_r, const Eigen::Vector3d& t_e_r,
  //           const Eigen::Quaterniond q_e_r, const Eigen::Vector3d t_e_r,
  //           const SplineMeta<SplineOrder>& spline_segment_meta,
  //           double weight) // const Vec6d& info_vec)
  EventAgularFactor(int64_t time_ns, const Eigen::Vector3d pt, const event_flow_velocity flow, 
            const Eigen::Vector3d doppler_velocity,
            // const Eigen::Quaterniond & q_e_r, const Eigen::Vector3d& t_e_r,
            const Eigen::Quaterniond q_e_r, const Eigen::Vector3d t_e_r,
            const SplineMeta<SplineOrder>& spline_segment_meta,
            double weight) // const Vec6d& info_vec)
      : time_ns_(time_ns),
        pt_(pt), doppler_velocity_(doppler_velocity),
        q_e_r(q_e_r), t_e_r(t_e_r),
        spline_meta_(spline_segment_meta),
        lock_extrincs(true),      // HAO TODO: 暂时不优化外参
        weight_(weight)

    // info_vec_(info_vec) 
    {
      set_num_residuals(3);           // 定义残差值的大小(事件角速度残差)

      flow_ << flow.x, flow.y, 0;

      size_t knot_num = this->spline_meta_.NumParameters();
      // LOG(ERROR) << "knot_num = " << knot_num << std::endl;

      // TODO: 需要提供采样曲线的多普勒速度和偏执                   
      for (size_t i = 0; i < knot_num; ++i) {             
        mutable_parameter_block_sizes()->push_back(4);   // rotation
      }
      for (size_t i = 0; i < knot_num; ++i) {
        mutable_parameter_block_sizes()->push_back(3);   // position
      }
      mutable_parameter_block_sizes()->push_back(3);    // linear bias // 1 -11 修改
      mutable_parameter_block_sizes()->push_back(3);    // omega bias
      
      // if(!optition.lock_extrincs)
      LOG(ERROR) << "lock extrincs? " << ((lock_extrincs)? "True": "False");
      if(! lock_extrincs)
      {
        mutable_parameter_block_sizes()->push_back(4);  // q_e_r
        mutable_parameter_block_sizes()->push_back(3);  // t_e_r
      }
      mutable_parameter_block_sizes()->push_back(1);  // time_offset 事件时间和雷达时间的偏移
    }

   virtual bool Evaluate(double const* const* parameters, double* residuals,
                        double** jacobians) const {
      typename SO3View::JacobianStruct J_R;
      typename SO3View::JacobianStruct J_w;
      typename R3View::JacobianStruct J_v;
      
      LOG(ERROR) << "Evaluate EventAgularFactor " << std::endl;

      debug_ceres.Open();
      debug_ceres.debug_file << "Evaluate EventAgularFactor \n";

      size_t knot_num = spline_meta_.NumParameters();
      // Eigen::Map<Vec3d const> omega_bias(parameters[2 * knot_num]);

      // 1-11修改
      Eigen::Map<Vec3d const> linear_bias(parameters[2 * knot_num]);
      Eigen::Map<Vec3d const> omega_bias(parameters[2 * knot_num + 1]);
      int t_offset_index = 2 * knot_num + 2;

      // Eigen::Map<Mat3d const> T_R_e_r(parameters[knot_num + 1]);
      // HAO TODO: 修改
      // int t_offset_index = 2 * knot_num + 1;
      if(! lock_extrincs)
      {
        Eigen::Map<Quatd const> T_q_e_r(parameters[2 * knot_num + 2]);
        Eigen::Map<Vec3d const> T_t_e_r(parameters[2 * knot_num + 3]);
        t_offset_index = 2 * knot_num + 4;
      }

      double time_offset_in_ns = parameters[t_offset_index][0];

      int64_t t_corrected = time_ns_ + (int64_t)time_offset_in_ns;

      t_corrected = std::min(t_corrected, spline_meta_.segments.at(0).MaxTimeNs() - 1);
      t_corrected = std::max(t_corrected, spline_meta_.segments.at(0).MinTimeNs() + 1);

      LOG(ERROR) << "Interplate Event Flow " << std::endl;

      // 估计的速度 
      // Eigen::Vector3d gyro_, vel_, rot_accel, accel_r3;
      Eigen::Vector3d gyro_, rot_accel, v_inG;
      SO3d S_ItoG;
      if (jacobians){
        S_ItoG = SO3View::EvaluateRp(t_corrected, spline_meta_.segments.at(0),
                        parameters, &J_R);

        gyro_ = SO3View::VelocityBody(t_corrected,
                                            spline_meta_.segments.at(0),
                                            parameters, &J_w);

        rot_accel = SO3View::accelerationBody(t_corrected,  
                                              spline_meta_.segments.at(0), 
                                              parameters);

        v_inG = R3View::velocity(t_corrected,
                                      spline_meta_.segments.at(0),
                                      parameters + knot_num, &J_v);   
      }else{
        S_ItoG = SO3View::EvaluateRp(t_corrected, spline_meta_.segments.at(0),
                        parameters, nullptr);
                               
        gyro_ = SO3View::VelocityBody(t_corrected,
                                      spline_meta_.segments.at(0),
                                      parameters, nullptr);

        rot_accel = SO3View::accelerationBody(t_corrected,  
                                      spline_meta_.segments.at(0), 
                                      parameters);
      
        v_inG = R3View::velocity(t_corrected,
                              spline_meta_.segments.at(0),
                              parameters + knot_num, nullptr);   
      }

      // Conversion vel
      Eigen::Matrix3d R_e_r = q_e_r.toRotationMatrix();   
  
      // 1-13 修改
      Eigen::Vector3d t_r_e_large_0 =  R_e_r.transpose() * t_e_r;
      LOG(ERROR) << "Test t_r_e_large_0 = " << Output(t_r_e_large_0.transpose()) << std::endl;
      Eigen::Vector3d t_r_e = -1.0 * t_r_e_large_0;
      LOG(ERROR) << "Test t_r_e = " << std::endl;
      LOG(ERROR) << "Test t_r_e = " << Output(t_r_e.transpose()) << std::endl;

      Eigen::Vector3d pixel_cord = pt_;

      Eigen::Vector3d pre_vec = Skew(pixel_cord) * (R_e_r.transpose() * ((S_ItoG.matrix().transpose() * v_inG + linear_bias) + (gyro_ + R_e_r * omega_bias).cross(t_r_e)));

      // 3-18 修改 法向光流的计算
      Eigen::Vector3d grad;
      grad << -1.0 / flow_(0), -1.0 / flow_(1), 0.0;
      double normal_norm = 1.0 / grad.norm();
      Eigen::Vector3d normal_flow = grad * normal_norm;

      // Eigen::Vector3d 
      double post_vec = normal_norm + normal_flow.transpose() * Skew(pixel_cord) * (R_e_r.transpose() * gyro_ + omega_bias);

      // 残差计算
      Eigen::Map<Eigen::Vector3d> residual(residuals);
      residual = (weight_ * pre_vec * post_vec);

      Eigen::RowVector3d omega_bias_row_vec = omega_bias.transpose();
    
      Eigen::RowVector3d t_e_r_row_vec = t_e_r.transpose();
    
      Eigen::Vector3d residuals_copy = residual;

      // 不评估雅可比就返回
      if (!jacobians) {
        LOG(ERROR) << "EventAgularFactor No Jacobi!" << std::endl;
        debug_ceres.Close();

        // debug_ceres_jacobis.Close();
        return true;
      }

          // 3-18 修改
          Eigen::Matrix3d J_gyro_pre_ =  - Skew(pixel_cord) * R_e_r.transpose() * Skew(t_r_e); ///use for transpose()
          Eigen::RowVector3d J_gyro_post_ = normal_flow.transpose() * Skew(pixel_cord) * R_e_r.transpose();

          LOG(ERROR) << "Calculate gyro Jacobbi " << std::endl;

          // 1-24 修改
          Eigen::Matrix3d J_S_pre_ = - Skew(pixel_cord) * R_e_r.transpose() * S_ItoG.matrix().transpose() * SO3d::hat(v_inG);

          LOG(ERROR) << "Calculate S_ItoG Jacobbi " << std::endl;

          ///[step1-2] jacobians of control points
          /// Rotation control point
          // Eigen::Matrix4d Jac_R;
          Eigen::Matrix<double, 12, 4> Jac_R;
          for (size_t i = 0; i < knot_num; i++) {
            size_t idx = i;
            if (jacobians[idx]) {
              Eigen::Map<Eigen::Matrix<double, 3, 4, Eigen::RowMajor>> jac_kont_R(
                  jacobians[idx]);
              jac_kont_R.setZero();
                    
              // 3-8 修改
              jac_kont_R.block<3, 3>(0, 0) =
                  ((J_gyro_pre_.transpose() * J_w.d_val_d_knot[i]).transpose() * post_vec).transpose()
                  + pre_vec * J_gyro_post_ * J_w.d_val_d_knot[i] + ((J_S_pre_ * J_R.d_val_d_knot[i]).transpose() * post_vec).transpose(); 

              jac_kont_R = (weight_ * jac_kont_R).eval();              

              // Eigen::RowVector4d jac_kont_R_copy = jac_kont_R;
              Eigen::Matrix<double, 3, 4> jac_kont_R_copy = jac_kont_R;

              Jac_R.block<3,4>(3 * i,0) = jac_kont_R_copy;

              // Special for Jacobias
              debug_ceres_jacobis.debug_file << jac_kont_R_copy << " ";
            }
          }
          LOG(ERROR) << "Add jacobians for Rotation control point " << std::endl;

          // [3] velocity 的雅可比
          // Eigen::Map<Eigen::Matrix<double, 1, 3>> J_vel_(jacobians[knot_num]);
          // Eigen::Matrix3d J_vel_ = Skew(pt_) * R_e_r * S_ItoG.matrix().inverse();
          // 1-11 修改
          Eigen::Matrix3d J_vel_ = (Skew(pixel_cord) * R_e_r.transpose() * S_ItoG.matrix().transpose()).eval();
          // Eigen::Matrix3d J_vel_ = Eigen::Matrix3d::Zero();
          // J_vel_ = J_vel_.transpose()
          LOG(ERROR) << "Calculate velocity Jacobbi " << std::endl;

          /// position control point
          Eigen::Matrix<double, 12, 3> Jac_p;
          for (size_t i = knot_num; i <  2 * knot_num; i++) {
            size_t idx = i;
            if (jacobians[idx]) {
              // Eigen::Map<Eigen::Matrix<double, 1, 3, Eigen::RowMajor>> jac_kont_p(
              //     jacobians[idx]);
              Eigen::Map<Eigen::Matrix<double, 3, 3, Eigen::RowMajor>> jac_kont_p(
                  jacobians[idx]);
              jac_kont_p.setZero();

              // 1-24 修改
              jac_kont_p = (weight_ * ((J_vel_ *  J_v.d_val_d_knot[i - knot_num]).transpose() * post_vec)).eval();        
            }
          }
          LOG(ERROR) << "Add jacobians for Position control point " << std::endl;

          // 1-11 修改
          // [3] linear_bias 的雅可比          
          Eigen::Matrix3d Jac_v_bias;
          if(jacobians[2 * knot_num])
          {
            // Eigen::Map<Eigen::Matrix<double, 1, 3>> J_linear_bias_(jacobians[2 * knot_num]); 
            Eigen::Map<Eigen::Matrix<double, 3, 3>> J_linear_bias_(jacobians[2 * knot_num]); 
            J_linear_bias_.setZero();
            J_linear_bias_ = (weight_ * (Skew(pixel_cord) * R_e_r.transpose()).transpose() * post_vec).transpose().eval();
            Jac_v_bias = J_linear_bias_;

            debug_ceres.debug_file << "J_linear_bias_ = " << Output_M(Jac_v_bias) << "]\n";
            debug_ceres_jacobis.debug_file << Output_M(Jac_v_bias) << " ";

          }

          // [4] omega_bias 的雅可比
          // Eigen::RowVector3d Jac_w_bias;
          Eigen::Matrix3d Jac_w_bias;
          if(jacobians[2 * knot_num + 1])
          {
            // Eigen::Map<Eigen::Matrix<double, 1, 3>> J_angular_bias_(jacobians[2 * knot_num + 1]);

            Eigen::Map<Eigen::Matrix<double, 3, 3>> J_angular_bias_(jacobians[2 * knot_num + 1]);
            J_angular_bias_.setZero();

            J_angular_bias_ = (((Skew(pixel_cord) * R_e_r.transpose() * (- Skew(t_r_e) * R_e_r)).transpose() * post_vec).transpose() + pre_vec * normal_flow.transpose() * Skew(pixel_cord));

            J_angular_bias_ = (weight_ * J_angular_bias_).eval();
            Jac_w_bias = J_angular_bias_;

            // Special for Jacobias
            debug_ceres_jacobis.debug_file << Output_M(Jac_w_bias) << " ";
          }
          LOG(ERROR) << "Add jacobians for Angular Bias" << std::endl;

          LOG(ERROR) << "lock_extrincs: " << ((lock_extrincs)? "True":"False") << std::endl;
          if(!lock_extrincs)
          {
            if(jacobians[2 * knot_num + 2] && jacobians[2 * knot_num + 3])
            // if(jacobians[2 * knot_num + 1] && jacobians[2 * knot_num + 2])
            {
              Eigen::Map<Eigen::Matrix<double, 3, 3>> J_R(jacobians[2 * knot_num + 2]);
              Eigen::Map<Eigen::Matrix<double, 3, 3>> J_t(jacobians[2 * knot_num + 3]);
             
              // 3-17 修改
              Eigen::Matrix3d J_pre_R = - Skew(pixel_cord) * R_e_r.transpose() * Skew(((S_ItoG.matrix().transpose() * v_inG + linear_bias) + (gyro_ + R_e_r * omega_bias).cross(t_r_e)))
                                        + Skew(pixel_cord) * R_e_r.transpose() * Skew(t_r_e) * R_e_r * Skew(omega_bias);
              
              Eigen::Matrix3d J_pre_t = Skew(pixel_cord) * R_e_r.transpose() * Skew(gyro_ + R_e_r * omega_bias);

              Eigen::RowVector3d J_post_R =  - normal_flow.transpose() * Skew(pixel_cord) * R_e_r.transpose() * Skew(gyro_);

              J_R = (J_pre_R.transpose() * post_vec + pre_vec * J_post_R).transpose();
              J_t = (J_pre_t.transpose() * post_vec).transpose();

              Eigen::Matrix3d J_R_copy = J_R;
              Eigen::Matrix3d J_t_copy = J_t;
            }
          }

          // 添加时移优化
          // Eigen::RowVectorXd Jac_t;
          LOG(ERROR) << "Evaluate timeoffset" << std::endl;
          double Jac_t;
          if(jacobians[t_offset_index])
          {
            // 3-18 修改
            Eigen::Map<Eigen::Matrix<double, 1, 3, Eigen::RowMajor>> J_t_vec(jacobians[t_offset_index]);
            J_t_vec.setZero();

            LOG(ERROR) << "J_t_vec allocate" << std::endl;
           
            Eigen::Vector3d t_r_e_temp = R_e_r.transpose() * t_e_r;

            // 3-18 修改     
            Eigen::Vector3d J_pre_d_t = - Skew(pixel_cord) * R_e_r.transpose() * Skew(t_r_e) * rot_accel; 
            // LOG(ERROR) << "J_pre_d_t = " << J_pre_d_t << std::endl;
            double J_post_d_t = normal_flow.transpose() * Skew(pixel_cord) * R_e_r.transpose() * rot_accel;
            // LOG(ERROR) << "J_post_d_t = " << J_post_d_t << std::endl; 

            Eigen::RowVector3d J_t_temp = J_pre_d_t.transpose() * post_vec
                          + pre_vec.transpose() * J_post_d_t;
                          // J_t_vec = 
            J_t_vec = 1e-9 * weight_ * J_t_temp;
            J_t_vec = J_t_vec.eval();
          }

          LOG(ERROR) << "Add jacobians for J_t_offset" << std::endl;

      LOG(ERROR) << "All Jacobi for Event factor Done" << std::endl;

      return true;
    }

private:
    int64_t time_ns_;
    // cv::Point2d pt_;
    Eigen::Vector3d pt_;
    Eigen::Vector3d flow_;
    Eigen::Vector3d doppler_velocity_;
    Eigen::Quaterniond q_e_r;
    Eigen::Vector3d t_e_r;
    SplineMeta<SplineOrder> spline_meta_;
    // Vec6d info_vec_;
    Eigen::Vector3d angular_bias;
    Eigen::Vector3d gravity;
    bool lock_extrincs;
    double weight_;
};


// bias_gyr_i, bias_gyr_j, bias_acc_i, bias_acc_j
class NewBiasFactor : public ceres::SizedCostFunction<6, 3, 3, 3, 3> {
 public:
 EIGEN_MAKE_ALIGNED_OPERATOR_NEW
  NewBiasFactor(double dt, const Eigen::Matrix<double, 6, 1>& sqrt_info) {
    double sqrt_dt = std::sqrt(dt);
    sqrt_info_.setZero();
    sqrt_info_.diagonal() = sqrt_info / sqrt_dt;
  }
  virtual bool Evaluate(double const* const* parameters, double* residuals,
                        double** jacobians) const {
    using Vec3d = Eigen::Matrix<double, 3, 1>;
    using Vec6d = Eigen::Matrix<double, 6, 1>;

    LOG(ERROR) << "Evaluate Bias Factor " << std::endl;


    // Check the sizes match.
    const std::vector<int>& parameter_block_sizes_temp =
          this->parameter_block_sizes();
    LOG(ERROR) << "parameters need have " << (parameter_block_sizes_temp).size() <<std::endl;
    for(auto& param_block_size: parameter_block_sizes_temp)
    {
      LOG(ERROR) << "parameter size = " << param_block_size <<std::endl;
    }

    if(parameters == nullptr)
    {
      LOG(ERROR) << "parameters not exist " << std::endl;
      return false;
    }
    else
    {
      LOG(ERROR) << "parameters exist " << std::endl;
    }

    if(parameters[0] != nullptr)
      LOG(ERROR) << " parameters[0] exist " << std::endl;
    else
      LOG(ERROR) << " parameters[0] not exist " << std::endl;

    Eigen::Map<Vec3d const> bias_w_i(parameters[0]);
    Eigen::Map<Vec3d const> bias_w_j(parameters[1]);
    Eigen::Map<Vec3d const> bias_v_i(parameters[2]);
    Eigen::Map<Vec3d const> bias_v_j(parameters[3]);

    LOG(ERROR) << "Get All Bias Parameters " << std::endl;

    LOG(ERROR) << "bias_w_i: " << Output(bias_w_i.transpose());
    LOG(ERROR) << "bias_w_j: " << Output(bias_w_j.transpose());
    LOG(ERROR) << "bias_v_i: " << Output(bias_v_i.transpose());
    LOG(ERROR) << "bias_v_j: " << Output(bias_v_j.transpose());
    LOG(ERROR) << "bias_w_j - bias_w_i: " << Output(bias_w_j - bias_w_i);
    LOG(ERROR) << "bias_v_j - bias_v_i: " << Output(bias_v_j - bias_v_i);


    Vec6d res;
    res.block<3, 1>(0, 0) = bias_w_j - bias_w_i;
    res.block<3, 1>(3, 0) = bias_v_j - bias_v_i;

    Eigen::Map<Vec6d> residual(residuals);


    debug_ceres.Open();
    debug_ceres_jacobis.Open();
    if(!clear_debug)
    {
      clear_debug = true;
      debug_ceres.Close();

      debug_ceres.debug_file.open(debug_ceres.file_path, std::ios::trunc);
      // debug_ceres.debug_file.clear();
      debug_ceres.debug_file.close();

      debug_ceres.Open();
      debug_ceres.debug_file << "Start to Record \n";
    }
    debug_ceres.debug_file << "Evaluate BiasFactor \n";

    // LOG(ERROR) << "open debug file: " << debug_ceres.file_path << std::endl;

    Vec6d residual_vec = residual;
    // debug_ceres.debug_file << "residuals = " << std::setprecision(5) << residual_vec.transpose() << std::endl;
    LOG(ERROR) << "residuals done" << std::endl;

    // Eigen::RowVectorXd bias_w_i_row_vec = bias_w_i.transpose();
    // Eigen::RowVectorXd bias_w_j_row_vec = bias_w_j.transpose();
    // Eigen::RowVectorXd bias_v_i_row_vec = bias_v_i.transpose();
    // Eigen::RowVectorXd bias_v_j_row_vec = bias_v_j.transpose();
    // debug_ceres.debug_file << "Details: weight_ = " << std::setprecision(5)
    //                               << "\n bias_w_i = [" <<  Output(bias_w_i_row_vec) << "] "
    //                               << "\n bias_w_j = [" <<  Output(bias_w_j_row_vec) << "] "
    //                               << "\n bias_v_i = [" <<  Output(bias_v_i_row_vec) << "] "
    //                               << "\n bias_v_j = [" <<  Output(bias_v_j_row_vec) << "] "
    //                                << "\n sqrt_info_ = [" <<  sqrt_info_ << std::endl;

                                

    LOG(ERROR) << "sqrt_info_ = \n" << Output_M(sqrt_info_) << std::endl;
    LOG(ERROR) << "res = " << Output(res.transpose()) << std::endl;

    residual = sqrt_info_ * res;
    // + Vec6d::Constant(10); // HAO TODO: Test residual of bias if too small

    LOG(ERROR) << "residual = " << Output(residual.transpose()) << std::endl;


    // // Debug: Residual & Jacobi
    // for (int i = 0; i < this->parameter_block_sizes().size(); ++i) {
    //     LOG(ERROR) << "Block size at index " << i << " = " << parameter_block_sizes()[i];
    // }
    // // 使用所有的参数块
    // for (int i = 0; i < this->parameter_block_sizes().size(); ++i) {
    //     LOG(ERROR) << "Parameter " << i << " = " << parameters[i][0];
    // }
    // LOG(ERROR) << "Parameter for last = " << parameters[8][0] 
    // << ", " << parameters[8][1] s
    // << ", " << parameters[8][2] << std::endl;



    if (jacobians) {

      debug_ceres_jacobis.debug_file << "Evaluate BiasFactor \n";
      debug_ceres_jacobis.debug_file << "[ ";

      for (size_t i = 0; i < this->parameter_block_sizes().size(); ++i) {
          if (jacobians[i] != nullptr) {
              LOG(ERROR) << "Jacobian at index " << i << " is valid.";
          } else {
              LOG(ERROR) << "Jacobian at index " << i << " is nullptr.";
          }
      }

      if (jacobians[0]) {
        Eigen::Map<Eigen::Matrix<double, 6, 3, Eigen::RowMajor>> jac_bg_i(
            jacobians[0]);
        jac_bg_i.setZero();
        jac_bg_i.block<3, 3>(0, 0) = -Eigen::Matrix3d::Identity();
        jac_bg_i.applyOnTheLeft(sqrt_info_);


        Eigen::MatrixXd jac_bg_i_copy = jac_bg_i;
        debug_ceres.debug_file << "J_bg_i = " << Output_M(jac_bg_i_copy) << "]\n";


        debug_ceres_jacobis.debug_file << Output_M(jac_bg_i_copy) << "\n";
      }
      if (jacobians[1]) {
        Eigen::Map<Eigen::Matrix<double, 6, 3, Eigen::RowMajor>> jac_bg_j(
            jacobians[1]);
        jac_bg_j.setZero();
        jac_bg_j.block<3, 3>(0, 0) = Eigen::Matrix3d::Identity();
        jac_bg_j.applyOnTheLeft(sqrt_info_);

        Eigen::MatrixXd jac_bg_j_copy = jac_bg_j;
        debug_ceres.debug_file << "` = " << Output_M(jac_bg_j_copy) << "]\n";

        debug_ceres_jacobis.debug_file << Output_M(jac_bg_j_copy) << " ";
      }
      if (jacobians[2]) {
        Eigen::Map<Eigen::Matrix<double, 6, 3, Eigen::RowMajor>> jac_ba_i(
            jacobians[2]);
        jac_ba_i.setZero();
        jac_ba_i.block<3, 3>(3, 0) = -Eigen::Matrix3d::Identity();
        jac_ba_i.applyOnTheLeft(sqrt_info_);

        Eigen::MatrixXd jac_ba_i_copy = jac_ba_i;
        debug_ceres.debug_file << "J_ba_i = " << Output_M(jac_ba_i_copy) << "]\n";

        debug_ceres_jacobis.debug_file << Output_M(jac_ba_i_copy) << " ";
      }
      if (jacobians[3]) {
        Eigen::Map<Eigen::Matrix<double, 6, 3, Eigen::RowMajor>> jac_ba_j(
            jacobians[3]);
        jac_ba_j.setZero();
        jac_ba_j.block<3, 3>(3, 0) = Eigen::Matrix3d::Identity();
        jac_ba_j.applyOnTheLeft(sqrt_info_);

        Eigen::MatrixXd jac_ba_j_copy = jac_ba_j;
        debug_ceres.debug_file << "J_ba_j = " << Output_M(jac_ba_j_copy) << "]\n";

        debug_ceres_jacobis.debug_file << Output_M(jac_ba_j_copy) << "]\n";
      }
    }
    else
    {
      LOG(ERROR) << "Jacobi is not exist " << std::endl; 
    }

    debug_ceres.Close();


    debug_ceres_jacobis.Close();
    return true;
  }

 private:
  Eigen::Vector3d acc_i_, acc_j_;
  Eigen::Vector3d gyr_i_, gyr_j_;
  Eigen::Matrix<double, 6, 6> sqrt_info_;
};
